
name: terraform plan

on: push
  # inputs:
  #  environment:
  #    description: 'The environment to deploy to (e.g., prod, nonprod)'
  #    required: true

jobs:
  terraform_plan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "< 1.6.0"

      - name: Set up AWS credentials
        run: |
         echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
         echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

          
      # - name: Extract bucket name from backend configuration
      #   id: extract_bucket
      #   run: |
      #    if [[ "$ENVIRONMENT" == "prod" ]]; then
      #     BACKEND_FOLDER="prod-us-east-1"
      #    elif [[ "$ENVIRONMENT" == "cert" ]]; then
      #     BACKEND_FOLDER="cert2-us-east-1"
      #    elif [[ "$ENVIRONMENT" == "dev" ]]; then
      #     BACKEND_FOLDER="pp-dev-us-east-1"
      #    else
      #     echo "Invalid environment specified"
      #     exit 1
      #    fi
      #    source "$BACKEND_FOLDER/terraform.env"
      #    BUCKET_TF_STATE=$TF_S3_BUCKET
      #    echo "::set-output name=bucket_name::$BUCKET_TF_STATE"
      #   env:
      #    ENVIRONMENT: ${{ github.event.inputs.environment }}
         
      - name: Terraform format
        id: fmt
        run: terraform fmt -diff -check -recursive -no-color

      - name: terraform init
        id: init
        # run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
        run: terraform init -backend=false
    
      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
       
      - name: Terraform Apply
        run: |
          terraform init
          terraform plan -out=tfplan
          read -p "Do you want to apply the Terraform plan? (yes/no): " approve
          if [ "$approve" != "yes" ]; then
            echo "Terraform apply canceled."
            exit 1
          fi
          terraform apply tfplan
        
      
         
 
